GrandOrgue is a sample based pipe organ simulator.

It currently supports Windows and Linux. Porting to other OS supported by RtMidi, 
RtAudio and wxWidgets should be possible with some build system adjustments.

Building on Windows:
--------------------

1) Install mingw-w64 (http://sourceforge.net/projects/mingw-w64) or TDM64 (http://sourceforge.net/projects/tdm-gcc).
2) Install cmake (http://www.cmake.org/)
3) Download a copy of wxMSW (wxWidgets for Windows) from http://www.wxwidgets.org/downloads/ (latest stable release while writing this guide - v2.8.12)
4) Extract it somewhere easily accessible. Best use a short, simple path without spaces like c:\wxWidgets
5) Open the command interpreter (cmd.exe) and run:
  cd C:\wxWidgets\build\msw
  mingw32-make -f makefile.gcc BUILD=bbb UNICODE=uuu SHARED=sss

Where bbb can equal:

    * release - builds wxWidgets in an optimised release form without debugging information (default)
    * debug - builds wxWidgets in debug mode with no optimisations 

uuu can equal:

    * 1 - builds a unicode version of wxWidgets
    * 0 - builds an ANSI version of wxWidgets (default) 

sss can equal:

    * 1 - builds shared libraries (default)
    * 0 - builds statically linked libraries 

so eg:
  mingw32-make -f makefile.gcc BUILD=release UNICODE=1 SHARED=0


6) Extract a copy of the GrandOrgue sources somewhere (eg. c:\gosources) [this file is part of them]
7) Create an empty build directory, eg. c:\gobuild
8) open a command interpreter (cmd.exe) and run:
 cd c:\gobuild
 cmake <path to Grand Orgue sources> -G "MinGW Makefiles" -DCMAKE_BUILD_TYPE=bbb -DUNICODE=xxx -DwxWidgets_ROOT_DIR=<path to wxwidget>

Where bbb is:
  Release - release build
  Debug - debug build

xxx is:
  1 - unicode build
  0 - ansi build

Both settings should match the wxWidget build.

 cmake c:\gosources -G "MinGW Makefiles" -DCMAKE_BUILD_TYPE=Release -DUNICODE=1  -DwxWidgets_ROOT_DIR=c:\wxWidgets

If you want to use ASIO, wou will need to get the ASIO SDK (http://www.steinberg.net/) and put it in 
the ext/rt/asio directory according to the various README files.

If you don't want to use ASIO, add -DRTAUDIO_USE_ASIO=OFF to the cmake parameters.

Running cmake will claim, that it can't find various tools (eg. xsltproc, zip, gettext, po4a, docbook-xsl) - 
they are optional and used to build the help system and/or translations. See below for details instructions
how to build them.

9) Build the project by running
mingw32-make
in the build directory.

The resulting executeable could require some DLLs from the wxWidgets build directory or mingw.
If you start it, Window will report each missing DLL. Simply copy them into the same directory as
GrandOrgue.exe.

If you install the NSIS installer (http://nsis.sourceforge.net/), you
can create a simple installer with
mingw32-make package

Building on Linux:
------------------

1) Install gcc C++ compiler, make, cmake and the development packages of wxWigets, jack (libjack) and alsa (libasound) from your distribution
2) Install docbook-xsl, xsltproc, zip, gettext and po4a (if present on your distribution)
3) Extract the GO sources somewhere, eg: /home/user/gosources
4) Create an empty build directory, eg: mkdir /home/user/gobuild
5) Run cmake:
  cd /home/user/gobuild
  cmake -DUNICODE=xxx -DCMAKE_BUILD_TYPE=bbb -G "Unix Makefiles" <path to go-sources>
  make

Where bbb is:
  Release - release build
  Debug - debug build

xxx is:
  1 - unicode build (most linux distributions will likely ship a unicode build)
  0 - ansi build

eg:
  cmake -DUNICODE=1 -DCMAKE_BUILD_TYPE=Release -G "Unix Makefiles" <path to go-sources>

Hint: For debugging a release build, add the -DCMAKE_CXX_FLAGS=-g option to cmake.

Building Linux packages:
-----------------------
To build a deb package (Debian/Ubuntu), do
sudo apt-get install build-essential fakeroot
dpkg-buildpackage -rfakeroot

If dpkg-buildpackage reports, that a package is missing, please install them too (sudo apt-get install <packagename).

GrandOrgue ships a spec file for building RPMs (tested with OpenSuSE).
To build, copy the grandorgue tarball to the rpm SOURCE directory and run:
rpmbuild -ba grandorgue.spec

Cross-compiling for Windows:
----------------------------

1) Install mingw-w64 (On Debian/Ubuntu, install the package mingw-w64) and
   all packages needed to build GO under Linux.
2) Prepare 5 directores:
  * extracted wxWidgets sources (I used 2.8.12) to a directory (/wxsrc)
  * extract GO trunk sources (with my last patches) to a directory (/gosrc)
  * create empty install directory (/inst)
  * create empty win build directory (/buildwin)
  * create empty linux build directory (/buildlinux)
In the following, I use the short path from above - normally
you would put them somewhere under $HOME and use something like /home/user/GO/wxsrc.
3) Build wxWidgets
cd /wxsrc
./configure --host=i686-w64-mingw32 --prefix=/inst --enable-unicode
make
make install 
4) Build GO for linux
cd /buildlinux
cmake -G "Unix Makefiles" -DCMAKE_BUILD_TYPE=Release /gosrc  -DUNICODE=1
make
5) Create toolchain definition for windows, file /inst/toolchain.def:
---------------------------------------------------------------------
# the name of the target operating system
SET(CMAKE_SYSTEM_NAME Windows)
SET(MSYS 1)

# which compilers to use for C and C++
SET(CMAKE_C_COMPILER i686-w64-mingw32-gcc)
SET(CMAKE_CXX_COMPILER i686-w64-mingw32-g++)
SET(CMAKE_RC_COMPILER i686-w64-mingw32-windres)

# here is the target environment located
SET(CMAKE_FIND_ROOT_PATH  /usr/i686-w64-mingw32 /inst)

# adjust the default behaviour of the FIND_XXX() commands:
# search headers and libraries in the target environment, search 
# programs in the host environment
set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)
---------------------------------------------------------------------

6) Build GO for windows
cd /buildwin
cmake -DCMAKE_TOOLCHAIN_FILE=/inst/toolchain.def /gosrc -DUNICODE=1 -DCMAKE_INSTALL_PREFIX=/inst -DSTATIC=1 -DIMPORT_EXECUTABLES=/buildlinux/ImportExecutables.cmake -DRTAUDIO_USE_ASIO=OFF
make

-DRTAUDIO_USE_ASIO=OFF turns building ASIO off - else you need to put the ASIO SDK into the sources

7) If you have installed NSIS too, run
make package
to create an installer

If you want to build a 64bit version, replace everywhere in this instruction i686-w64-mingw32 with x86_64-w64-mingw32.

Building the help and translations on Windows:
----------------------------------------------

This is how one can build GrandOrgue help and translations on Windows.

One needs docbook-xsl, gettext, libiconv, libxml2, libxslt, zlib, zip, perl and po4a.

I) Downloads
These packages can be downloaded from the following sites:
docbook-xsl: docbook-xsl-1.76.1.tar.bz2
	http://sourceforge.net/projects/docbook/files/docbook-xsl/1.76.1/docbook-xsl-1.76.1.tar.bz2/download

gettext is made of 4 packages: gettext-runtime, gettext-tools, gettext-runtime-dev, gettext-tools-dev.
All are mandatory to get gettext up and running:
gettext-runtime-dev_0.18.1.1-2_win32.zip
	http://ftp.acc.umu.se/pub/gnome/binaries/win32/dependencies/gettext-runtime-dev_0.18.1.1-2_win32.zip
gettext-runtime_0.18.1.1-2_win32.zip
	http://ftp.gnome.org/pub/gnome/binaries/win32/dependencies/gettext-runtime_0.18.1.1-2_win32.zip
gettext-tools-dev_0.18.1.1-2_win32.zip
	http://ftp.acc.umu.se/pub/gnome/binaries/win32/dependencies/gettext-tools-dev_0.18.1.1-2_win32.zip
gettext-tools_0.18.1.1-2_win32.zip
	http://ftp.acc.umu.se/pub/gnome/binaries/win32/dependencies/gettext-tools_0.18.1.1-2_win32.zip

iconv: iconv-1.9.2.win32.zip
	ftp://ftp.zlatkovic.com/libxml/iconv-1.9.2.win32.zip

libxml2: libxml2-2.7.8.win32.zip
	ftp://ftp.zlatkovic.com/libxml/libxml2-2.7.8.win32.zip

libxslt: libxslt-1.1.26.win32.zip
	ftp://ftp.zlatkovic.com/libxml/libxslt-1.1.26.win32.zip

zlib: zlib-1.2.5.win32.zip
	ftp://ftp.zlatkovic.com/libxml/zlib-1.2.5.win32.zip

zip: zip-3.0-setup.exe
	http://sourceforge.net/projects/gnuwin32/files/zip/3.0/zip-3.0-setup.exe/download

perl: perl must be newer than 5.8.2
	http://www.activestate.com => 5.14.2
	http://strawberryperl.com  => 5.12.3
	Both work nicely

po4a: po4a-0.41-1
There exists a cygwin build "ready to install"
	ftp://ftp.cygwinports.org/pub/cygwinports/release-2/po4a/po4a-0.41-1.tar.bz2

II) Installations
All packages can be installed in the same folder except docbook-xsl, perl and po4a

II.1) Install gettext, libiconv, libxml2, libxslt, zlib
Create a new folder (e.g. C:\GNUWin32). One recommends to use a folder name WITHOUT embedded whitespace.
Unzip these packages in C:\GNUWin32.
Note:
zlib-1.2.5.win32.zip, libxslt-1.1.26.win32.zip, libxml2-2.7.8.win32.zip and iconv-1.9.2.win32.zip unzip in
their own folder, so one needs to move the contents of each folder to the upper level C:\GNUWin32

II.2) Install zip and Perl
Run the installers.
One recommends to install perl to C:\Perl (no embedded whitespace) and zip in C:\GNUWin32

II.3) Install po4a
Trouble is sought when trying to run perl scripts in Cygwin Perl from the windows command line, so
po4a must be adapted to windows native Perl. This is easy, because po4a is pure perl.
1) unzip po4a-0.41-1.tar.bz2 to a po4a-0.41-1 folder anywhere on the disk
2) create a new po4a folder anywhere on the disk
2.1) in po4a create folders: bin and site\lib
2.2) copy po4a-0.41-1\usr\bin to po4a\bin
2.3) run Perl's utility pl2bat.bat on
	bin/po4a -> po4a.bat
	bin/po4a-gettextize -> po4a-gettextize.bat
	bin/po4a-normalize -> po4a-normalize.bat
	bin/po4a-translate -> po4a-translate.bat
	bin/po4a-updatepo -> po4a-updatepo.bat
2.4) copy
	po4a-0.41-1\usr\lib\perl5\vendor_perl\5.10\i686-cygwin\auto to po4a\site\lib\auto
	po4a-0.41-1\usr\lib\perl5\vendor_perl\5.10\Locale to po4a\site\lib\Locale
2.5) update Perl installation
	copy po4a\bin contents to perl's bin folder
	copy po4a\site contents to perl's site folder
2.6) optional cleanup : remove po4a and po4a-0.14-1

II.4) Install docbook-xsl
Unzip docbook-xsl-1.76.1.tar.bz2 anywhere on the disk e.g. C:\docbook-xsl-1.76.1

III) Building help
Add GNUWin32 to the system PATH
Check that the Perl bin folder is in the system PATH, since it should have been set by the installer.
If not, add the Perl bin folder to the system PATH.

Run cmake to configure the build:
cmake .. -G "MinGW Makefiles" -DCMAKE_BUILD_TYPE=Release|Debug -DUNICODE=0|1 -DSTATIC=0|1 -DwxWidgets_ROOT_DIR=drive:\path\to\wxWidgets -DDOCBOOK_DIR=drive:\path\to\docbook-xsl-1.76.1
See the README file for further details on the Windows build

There should not be any  of these complaints in the output:
-- Could NOT find Gettext (missing:  GETTEXT_MSGMERGE_EXECUTABLE GETTEXT_MSGFMT_EXECUTABLE)
-- gettext not found
-- xgettext not found (package gettext)
-- msgmerge not found (package gettext)
-- msgfmt not found (package gettext)
-- xsltproc not found
-- zip not found
-- po4a-gettext not found (package po4a)
-- po4a-translate not found (package po4a)
-- Not build help - some programs are missing
-- Not building translations - some programs are missing

Build GrandOrgue by running mingw32-make in the build directory.
See README.translate for further details about adding or updating translations
