include(${CMAKE_SOURCE_DIR}/GetPrerequisites.cmake)

macro(InstallWxTranslations)
  set(moFiles)
  foreach(dir ${ARGN})
    file(GLOB_RECURSE _tmpFiles ${dir}/*.mo)
    set(moFiles ${moFiles} ${_tmpFiles}) 
  endforeach()

  set(basename wxstd)
  set(moList)
  foreach(_currentMoFile ${moFiles})
    set(_lang)
    if (${_currentMoFile} MATCHES "/locale/([^/\\\\]+)/LC_MESSAGES/${basename}.mo")
      set(_lang ${CMAKE_MATCH_1})
    elseif (${_currentMoFile} MATCHES "/([^/\\\\]+)/${basename}.mo")
      set(_lang ${CMAKE_MATCH_1})
    elseif (${_currentMoFile} MATCHES "/locale/([^./\\\\]+).mo")
      get_filename_component(_tmpPath ${_currentMoFile} PATH)
      if (EXISTS ${_tmpPath}/${basename}.po OR EXISTS ${_tmpPath}/${basename}.pot)
        set(_lang ${CMAKE_MATCH_1})
      endif()
    endif()
    if (_lang)
      if(WIN32)
        set(_moDir ${CMAKE_BINARY_DIR}/bin/${_lang})
      elseif(APPLE)
        set(_moDir ${CMAKE_BINARY_DIR}/${PROJECT_NAME}.app/Contents/Resources/${_lang}.lproj)
      else()
        set(_moDir ${CMAKE_BINARY_DIR}/share/locale/${_lang}/LC_MESSAGES)
      endif()
      SET(_moFile ${_moDir}/${basename}.mo)
      file(MAKE_DIRECTORY ${_moDir})

      ADD_CUSTOM_COMMAND( 
        OUTPUT ${_moFile} 
        COMMAND ${CMAKE_COMMAND} -E copy ${_currentMoFile} ${_moFile} 
        DEPENDS ${_currentMoFile} 
      )
      list(APPEND moList ${_moFile})

      if(WIN32)
        install(FILES ${_moFile} DESTINATION bin/${_lang} RENAME ${basename}.mo)
      elseif(NOT APPLE)
        install(FILES ${_moFile} DESTINATION share/locale/${_lang}/LC_MESSAGES RENAME ${basename}.mo)
      endif()
    endif(_lang)
  endforeach()

  add_custom_target(copy_po_dependencies ALL DEPENDS ${moList})

endmacro(InstallWxTranslations)

macro(CopyWxTranslations)
  set(searchdirs)
  if(DEFINED wxWidgets_ROOT_DIR)
    get_filename_component(_dir ${wxWidgets_ROOT_DIR} REALPATH)
    if(IS_DIRECTORY ${_dir})
      list(APPEND searchdirs ${_dir})
    endif()
  endif()

  set(_libdirs)
  foreach(_file ${wxWidgets_LIBRARIES})
    string(REGEX REPLACE "^-L(.*)$" "\\1/dummy" _file ${_file})
    get_filename_component(dir ${_file} PATH)
    set(_libdirs ${_libdirs} ${dir})
  endforeach()

  foreach(dir ${wxWidgets_INCLUDE_DIRS} ${wxWidgets_LIBRARY_DIRS} ${_libdirs} $ENV{LC_PATH})
    foreach(postfix locale ../locale ../../locale  share/locale ../share/locale ../../share/locale ../../../share/locale)
      get_filename_component(_dir ${dir}/${postfix} REALPATH)
      if(IS_DIRECTORY ${_dir})
        list(APPEND searchdirs ${_dir})
      endif()
    endforeach()
  endforeach()
  list(REMOVE_DUPLICATES searchdirs)
  message(STATUS "wxTranslation search path: ${searchdirs}")
  InstallWxTranslations(${searchdirs})
endmacro(CopyWxTranslations)


macro(CopyDependencies target)
  set(searchdirs)
  set(_libdirs)
  foreach(_file ${wxWidgets_LIBRARIES})
    string(REGEX REPLACE "^-L(.*)$" "\\1/dummy" _file ${_file})
    get_filename_component(dir ${_file} PATH)
    set(_libdirs ${_libdirs} ${dir})
  endforeach()

  foreach(_dir ${wxWidgets_LIBRARY_DIRS} ${_libdirs})
    if(IS_DIRECTORY ${_dir})
      list(APPEND searchdirs ${_dir})
    endif()
   endforeach()
  list(REMOVE_DUPLICATES searchdirs)

  if (APPLE)
    set(BUILD_DIR ${CMAKE_BINARY_DIR}/${PROJECT_NAME}.app/Contents/Frameworks)
    set(DESTINATION_DIR ../Frameworks)
  else ()
    set(BUILD_DIR ${CMAKE_BINARY_DIR}/bin)
    set(DESTINATION_DIR bin)
  endif ()

  get_target_property(targetfile ${target} LOCATION)

  set(prereqs)
  set(libraries_to_copy)
  get_prerequisites("${targetfile}" prereqs 1 1 "${searchdirs}" "")

  set(_dlls)
  foreach(d ${prereqs})
    if(EXISTS ${d})
      GET_FILENAME_COMPONENT(_basename ${d} NAME)

      ADD_CUSTOM_COMMAND( 
        OUTPUT ${BUILD_DIR}/${_basename}
        COMMAND ${CMAKE_COMMAND} -E copy ${d} ${BUILD_DIR}/${_basename}
        DEPENDS ${d} 
      )
      if(NOT APPLE)
        install(FILES ${BUILD_DIR}/${_basename} DESTINATION ${DESTINATION_DIR})
      endif()
      list(APPEND _dlls ${BUILD_DIR}/${_basename})
    endif()
  endforeach()

 add_custom_target(copy_dlls_dependencies ALL DEPENDS ${_dlls})
endmacro(CopyDependencies)
